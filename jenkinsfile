pipeline {
    agent any
    
    environment {
        // AWS region and ECR repository details
        AWS_REGION = 'eu-north-1'  // Change to your AWS region
        ECR_REPOSITORY = 'my-ecr-repository'  // Replace with your ECR repository name
        IMAGE_TAG = "latest"  // You can customize this with dynamic versioning
    }
    
    stages {
        stage('Checkout') {
            steps {
                // Checkout your source code (from GitHub, Bitbucket, etc.)
                git branch: 'backend', url: 'https://github.com/mai-efat/project-nti.git'



            }
        }
        
        stage('Login to ECR') {
            steps {
                script {
            
                       
                    // Log in to Amazon ECR using the AWS CLI
                    withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'aws', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) { 
                        sh '''
                        aws sts get-caller-identity --region ${AWS_REGION}  # Confirm AWS credentials
                        aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin 676206908022.dkr.ecr.eu-north-1.amazonaws.com
                        '''
                    }
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image
                    sh '''

                

                    docker build -t my-ecr-repository .

                    '''
                }
            }
        }
        
        stage('Push to ECR') {
            steps {
                script {
                    // Push the Docker image to the ECR repository
                    sh '''
                
                     docker tag my-ecr-repository:latest 676206908022.dkr.ecr.eu-north-1.amazonaws.com/my-ecr-repository:latest
                    docker push 676206908022.dkr.ecr.eu-north-1.amazonaws.com/my-ecr-repository:latest
                               

                    '''
                }
            }
        }
 stage('Set up EKS kubeconfig') {
            steps {
                script {
withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'aws', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {

                    sh '''
                        aws eks --region eu-north-1 update-kubeconfig --name demo
                    '''
                }
            }
        }
}
  stage('Deploy to Kubernetes') {
            steps {
                script {
                    // Apply Kubernetes deployment configuration
                withKubeCredentials(kubectlCredentials: [[caCertificate: '', clusterName: 'demo', contextName: '', credentialsId: 'k8s', namespace: 'default', serverUrl: 'https://358CE0D82B9D3732D9E6D3D9904D033F.gr7.eu-north-1.eks.amazonaws.com']]) 
{
                      sh '''
                       kubectl get pods -n default
                        kubectl apply -f deployment.yml -n default
                        kubectl apply -f service.yml -n default
                        kubectl apply -f ingress.yml -n default


                        '''
                    }
                }

            }
        }
    }
    
    post {
        success {
            cleanWs() 
        }
        failure {
            cleanWs() 
        }
    }
}
